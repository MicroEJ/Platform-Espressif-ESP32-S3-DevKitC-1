<!--
	ANT

	Copyright 2017 IS2T. All rights reserved.
	IS2T PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
-->
<!--
	This script is called from the test-suite framework. It launches a Java MicroEJ Test and
	analyze the result with the file trace analyzer.
-->
<project name="harness" default="runTest" xmlns:traceAnalyzer="antlib:com.is2t.testsuite.traceAnalyzer">

	<!-- Set prefix for environment variables -->
	<property environment="env"/>

	<property file="${testsuite.test.properties}"/>
	<property file="${testsuite.common.properties}"/>

	<property name="testsuite.trace.timeout" value="600" description="Default value of trace analyzer timeout"/>
	<property name="testsuite.trace.endline" value="VM END (exit code = 0)"/>


	<fail unless="platform.dir" message="Please set the 'platform.dir' property."/>

	<!-- JPF deploy tool name -->
	<fail unless="microejtool.deploy.name" message="Please set the 'microejtool.deploy.name' property."/>

	<!-- Socket trace analyzer settings -->
	<fail unless="testsuite.trace.timeout" message="Please set the 'testsuite.trace.timeout' property."/>
	<fail unless="esp.flash.port" message="Please set the 'esp.flash.port' property."/>
	<fail unless="esp.flash.baudrate" message="Please set the 'esp.flash.baudrate' property."/>
	<fail unless="esptool.installation.dir" message="Please set the 'esptool.installation.dir' property."/>
	<fail unless="openocd.installation.dir" message="Please set the 'openocd.installation.dir' property."/>

	<!-- Import the script that defines the trace analyzer tasks  -->
	<import file="${platform.dir}/scripts/traceAnalyzerDefinition.xml"/>

	<scriptdef name="initPythonMinitermExecTimeout" language="javascript">
			<attribute name="propertyName"/>
			var propertyName = attributes.get('propertyname');
			var testsuiteTraceTimeoutInSec = project.getProperty('testsuite.trace.timeout');
			var testsuiteTraceTimeoutInMs = testsuiteTraceTimeoutInSec * 1000;
	        project.setUserProperty(propertyName, testsuiteTraceTimeoutInMs);
	</scriptdef>

	<target name="runTest" depends="traceAnalyzer/definition">
		<!-- Create and clean microej.io.tmpdir (done by the workbench but not done when running from testsuite engine) -->
		<tempfile property="microej.io.tmpdir" deleteonexit="true"/>
		<delete failonerror="false"	dir="${microej.io.tmpdir}"/>
		<mkdir dir="${microej.io.tmpdir}"/>

		<!-- set a default value for MicroJvm Java libs exclude path -->
		<property name="excludes.platform.classpath.microjvm.javalibs" value="${excludes.platform.classpath.javalibs}"/>

		<!-- default path for the binary output by the MicroEJ full link -->
		<property name="testsuit.test.output.dir" location="${testsuite.report.dir}/bin/${testsuite.test.class}"/>
		<property name="testsuit.test.binary.file" location="${testsuit.test.output.dir}/application.out"/>

		<!-- Run underlying the launch -->
		<ant antfile="${platform.dir}/scripts/fullLink.microejLaunch">
			<property name="application.classpath" 		value="${testsuite.test.classpath}${path.separator}${application.classpath}"/>
			<property name="application.main.class" 	value="${testsuite.test.class}"/>
			<property name="output.dir" value="${testsuite.report.dir}/bin"/>
			<property name="basedir" value="${platform.dir}/scripts"/>
		</ant>

		<fail message="Binary file generation failed.">
			<condition>
				<!-- generated binary file has to be created -->
				<not><available file="${testsuit.test.binary.file}"/></not>
			</condition>
		</fail>


		<!-- Program the generated binary file on the target -->
		<ant antfile="${platform.dir}/scripts/${microejtool.deploy.name}.microejTool" dir="${platform.dir}/scripts">
			<property name="platform.dir" location="${platform.dir}" />
			<property name="application.file" location="${testsuit.test.binary.file}"/>
			<property name="esp.flash.port" value="${esp.flash.port}"/>
			<property name="esp.flash.baudrate" value="${esp.flash.baudrate}"/>
			<property name="esptool.installation.dir" value="${esptool.installation.dir}"/>
		</ant>

		<!-- Analyze trace. Trace is fully generated: stop when the test ends -->
		<antcall target="traceAnalyzer"/>

		<!-- If the script reaches this point, test result is success -->
	</target>

	<target name="runTest/clean/binaries" if="clean.binaries" description="Clean binaries output dir of the test">
		<delete dir="${testsuit.test.output.dir}"/>
	</target>

	<target name="traceAnalyzer">

		<tempfile property="testsuite.trace.file" prefix="trace" suffix=".txt" destdir="${java.io.tmpdir}" deleteonexit="true"/>

		<parallel threadcount="2">

			<sequential>
				<initPythonMinitermExecTimeout propertyName="testsuite.python.miniterm.timeout"/>
				<!-- Launch the miniterm and get the output trace -->
				<!-- Miniterm needs to be run in a terminal environment -->
				<exec executable="python" timeout="${testsuite.python.miniterm.timeout}" failonerror="false" >
					<arg line="-m serial.tools.miniterm --rts 0 --dtr 0 --raw ${esp.flash.port} 115200"/>
					<redirector
						outputproperty="redirector.out"
						errorproperty="redirector.err"
					 >
						<outputmapper type="merge" to="redirector.out"/>
						<errormapper type="merge" to="redirector.err"/>
					</redirector>
				</exec>

				<!-- programming done (may be failed): create waiting file -->
				<echo file="${testsuite.trace.file}" message="${redirector.out}"/>

				<!-- Output trace for verbose-->
				<echo message="--------- Serial Standard Output ---------${line.separator}${redirector.out}${line.separator}------------------------------------"/>
				<echo message="--------- Serial Error Output ---------${line.separator}${redirector.err}${line.separator}------------------------------------"/>

				<!-- File trace analyzer -->
				<traceAnalyzer:fileTraceAnalyzer stopEOFReached="true" traceFile="${testsuite.trace.file}"/>
			</sequential>

			<sequential>
				<!-- Clean binaries if requested
				<antcall target="runTest/clean/binaries" inheritall="true"/>
				-->

				<sleep seconds="1"/>
				<echo message="openocd.installation.dir=${openocd.installation.dir}"/>
				<exec executable="${openocd.installation.dir}/bin/openocd.exe" dir="${openocd.installation.dir}/share/openocd/scripts">
					<env key="Path" path="${openocd.installation.dir}/bin${path.separator}${env.Path}"/>
					<arg line="-s share/openocd/scripts -f interface/ftdi/esp32_devkitj_v1.cfg -f board/esp32-wrover.cfg -c &quot;init;reset run;exit&quot;"/>
				</exec>

				<!-- Waiting for the end of the test -->
				<waitfor checkevery="1" checkeveryunit="second" maxwait="${testsuite.trace.timeout}" maxwaitunit="second">
					<resourcecontains
						casesensitive="false"
						resource="${testsuite.trace.file}"
						substring="${testsuite.trace.endline}"
					/>
				</waitfor>

				<!-- Kill the serial trace process -->
				<exec executable="taskkill" failifexecutionfails="no">
			        <arg line="/im python.exe /f /t"/>
			    </exec>
			</sequential>
		</parallel>
	</target>


</project>